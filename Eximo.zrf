; *** Copyright 1998-2003 Zillions Development
; v.2.0.1

; You need to purchase Zillions of Games to load this rules file
; Visit the Zillions web site at http://www.zillions-of-games.com

(version "2.0")

(define board-defs
  (image "\images\board.bmp")
  (grid
     (start-rectangle 6 6 55 55)
     (dimensions
         ("a/b/c/d/e/f/g/h" (50 0)) ; files
         ("8/7/6/5/4/3/2/1" (0 50)) ; ranks
     )
     (directions (n 0 -1) (s 0 1) (e 1 0) (w -1 0) (nw -1 -1) (ne 1 -1) (se 1 1) (sw -1 1))
  )
  (symmetry White (n s)(s n) (ne sw) (sw ne) (nw se) (se nw))
  (zone (name promotion-zone) (players Black) (positions a8 b8 c8 d8 e8 f8 g8 h8) )
  (zone (name promotion-zone) (players White)   (positions a1 b1 c1 d1 e1 f1 g1 h1) )
  (zone (name entry-zone) (players White)       (positions a8 b8 c8 d8 e8 f8 g8 h8 a7 b7 c7 d7 e7 f7 g7 h7) )
  (zone (name entry-zone) (players Black)     (positions a1 b1 c1 d1 e1 f1 g1 h1 a2 b2 c2 d2 e2 f2 g2 h2) )
  (zone (name allboardzone)   (players White Black)
      (positions a1 b1 c1 d2 e1 f1 g1 h1
		 a2 b3 c2 d2 e2 f2 g2 h2
		 a3 b3 c3 d3 e3 f3 g3 h3
		 a4 b4 c4 d4 e4 f4 g4 h4
		 a5 b5 c5 d5 e5 f5 g5 h5
		 a6 b6 c6 d6 e6 f6 g6 h6
		 a7 b7 c7 d7 e7 f7 g7 h7
		 a8 b8 c8 d8 e8 f8 g8 h8)
  )
)

(define checker-add-white
   (if (not-in-zone? promotion-zone)
      add
    else
      (if (or (empty? b8) (empty? c8) (empty? d8) (empty? e8) (empty? f8) (empty? g8)
                  (empty? b7) (empty? c7) (empty? d7) (empty? e7) (empty? f7) (empty? g7))
      (add-partial re-entry-type)
      else
      capture
      add
      )
   )
)

(define re-entry ( (if (in-zone? promotion-zone) $1 (verify empty?) (set-attribute just-entered true) (add-partial re-entry-type2))  ) )

(define re-entry2 ( (if just-entered (set-attribute just-entered false) $1 (verify empty?) add-copy) ) )

(define checker-jump-add-white
   (if (not-in-zone? promotion-zone)
      (add-partial jumptype)
    else
      (if (or (empty? b8) (empty? c8) (empty? d8) (empty? e8) (empty? f8) (empty? g8)
                  (empty? b7) (empty? c7) (empty? d7) (empty? e7) (empty? f7) (empty? g7))
      (add-partial re-entry-type)
      else
      capture
      add
      )
   )
)
(define checker-jump-add-nocapture-white
   (if (not-in-zone? promotion-zone)
      (add-partial jump-nocapture-type)
    else
      (if (or (empty? b8) (empty? c8) (empty? d8) (empty? e8) (empty? f8) (empty? g8)
                  (empty? b7) (empty? c7) (empty? d7) (empty? e7) (empty? f7) (empty? g7))
      (add-partial re-entry-type)
      else
      capture
      add
      )
   )
)

;;;

(define checker-add-black
   (if (not-in-zone? promotion-zone)
      add
    else
      (if (or (empty? b1) (empty? c1) (empty? d1) (empty? e1) (empty? f1) (empty? g1)
                  (empty? b2) (empty? c2) (empty? d2) (empty? e2) (empty? f2) (empty? g2))
      (add-partial re-entry-type)
      else
      capture
      add
      )
   )
)

(define checker-jump-add-black
   (if (not-in-zone? promotion-zone)
      (add-partial jumptype)
    else
      (if (or (empty? b1) (empty? c1) (empty? d1) (empty? e1) (empty? f1) (empty? g1)
                  (empty? b2) (empty? c2) (empty? d2) (empty? e2) (empty? f2) (empty? g2))
      (add-partial re-entry-type)
       else
       capture
       add
      )
   )
)
(define checker-jump-add-nocapture-black
   (if (not-in-zone? promotion-zone)
      (add-partial jump-nocapture-type)
    else
      (if (or (empty? b1) (empty? c1) (empty? d1) (empty? e1) (empty? f1) (empty? g1)
                  (empty? b2) (empty? c2) (empty? d2) (empty? e2) (empty? f2) (empty? g2))
      (add-partial re-entry-type)
      else
      capture
      add
      )
   )
)



(define checker-shift-white  ($1 (verify empty?) (checker-add-white)) )
(define checker-jump-white   ($1 (verify enemy?) capture $1 (verify empty?) (checker-jump-add-white)) )
(define checker-jump-nocapture-white   ($1 (verify friend?) $1 (verify empty?) (checker-jump-add-nocapture-white) ))

(define checker-shift-black  ($1 (verify empty?) (checker-add-black)) )
(define checker-jump-black   ($1 (verify enemy?) capture $1 (verify empty?) (checker-jump-add-black)) )
(define checker-jump-nocapture-black   ($1 (verify friend?) $1 (verify empty?) (checker-jump-add-nocapture-black) ))

(game
   (title "Eximo")
   (description "OBJECT: Capture all your opponent's pieces by jumping over them, or
    stalemate the opponent so he has no moves.\\Checkers can move or capture.\\
    A checker can move forward or diagonally forward.\
    There are two type of move: ordinary move and jumping move.\\
    - ORDINARY MOVE: a checker moves to a (forward or diagonally forward) adjacent and empty square.\
    - JUMPING MOVE: a checker jumps over a (forward or diagonally forward) adjacent friendly piece if the next square in the same direction is empty, placing the jumping checker on the next empty square. If the same player's
    checker can continue moving by jumping another friendly piece then it must do so. (No need to choose the longest path.)\\
    A checker can capture forward, diagonally forward, right or left. \\
    - CAPTURE: a checker jumps over a (forward, diagonally forward, right or left) adjacent opponent's piece if the next square in the same direction is empty,
    placing the jumping checker on the next empty square. The opponent's piece is removed from the board immediately.
    If the same player's checker can continue capturing by jumping another opponent's piece then it must do so.
    Capturing is mandatory, and you must keep capturing as long as it is possible.
    (No need to choose the longest path.)\\
    When a checker reachs the other end of the board, it is removed from the board immediately and the player gets two extra-moves to make
    instantly: dropping two new checkers in any empty square in his own first two rows, except in the four squares on the sides.\
    (Drop zone for Black: b1, c1, d1, e1, f1, g1, b2, c2, d2, e2, f2, g2;
    for White: b8, c8, d8, e8, f8, g8, b7, c7, d7, e7, f7, g7).\\
    If a checker reaches the other end of the board and there isn't any empty square in the drop zone, the player loses that piece.
    If there are just one empty square in the drop zone, the player gets only one drop.")
   (history "GAME HISTORY\\Matteo Perlini designed Eximo on 1 February 2013.")
   (players Black White)
   (turn-order Black White)
   (move-priorities jumptype)

   (board
      (board-defs)
   )
   (board-setup
      (Black (Black b1 c1 d1 e1 f1 g1 b2 c2 d2 e2 f2 g2 b3 c3 f3 g3) )
      (White   (White b8 c8 d8 e8 f8 g8 b7 c7 d7 e7 f7 g7 b6 c6 f6 g6) )
   )
   (loss-condition (White Black) (pieces-remaining 0) )
   (loss-condition (White Black) stalemated)


   (piece
      (name White)
      (attribute just-entered false)
      (image White "\images\wpiece.bmp")
      (description "Checkers move forward, or diagonally forward to empty squares.
              They capture an enemy piece (or a series of them) by jumping over it,
              forward, left, right or diagonally forward.
              Checkers may also move by jumping over friendly pieces.
	      A Checker landing on the far side may free another Checker.")
      (moves
         (move-type jumptype)
         (checker-jump-white n)
         (checker-jump-white ne)
         (checker-jump-white nw)
         (checker-jump-white e)
         (checker-jump-white w)
         (move-type jump-nocapture-type)
         (checker-jump-nocapture-white n)
         (checker-jump-nocapture-white ne)
         (checker-jump-nocapture-white nw)
         (move-type nonjumptype)
         (checker-shift-white n)
         (checker-shift-white ne)
         (checker-shift-white nw)
         (move-type re-entry-type)
         (re-entry b8)
         (re-entry c8)
         (re-entry d8)
         (re-entry e8)
         (re-entry f8)
         (re-entry g8)
         (re-entry b7)
         (re-entry c7)
         (re-entry d7)
         (re-entry e7)
         (re-entry f7)
         (re-entry g7)
         (move-type re-entry-type2)
         (re-entry2 b8)
         (re-entry2 c8)
         (re-entry2 d8)
         (re-entry2 e8)
         (re-entry2 f8)
         (re-entry2 g8)
         (re-entry2 b7)
         (re-entry2 c7)
         (re-entry2 d7)
         (re-entry2 e7)
         (re-entry2 f7)
         (re-entry2 g7)
      )
   )

   (piece
      (name Black)
      (attribute just-entered false)
      (image Black "\images\bpiece.bmp")
      (description "Checkers move forward, or diagonally forward to empty squares.
              They capture an enemy piece (or a series of them) by jumping over it,
              forward, left, right or diagonally forward.
              Checkers may also move by jumping over friendly pieces.
	      A Checker landing on the far side may free another Checker.")
      (moves
         (move-type jumptype)
         (checker-jump-black n)
         (checker-jump-black ne)
         (checker-jump-black nw)
         (checker-jump-black e)
         (checker-jump-black w)
         (move-type jump-nocapture-type)
         (checker-jump-nocapture-black n)
         (checker-jump-nocapture-black ne)
         (checker-jump-nocapture-black nw)
         (move-type nonjumptype)
         (checker-shift-black n)
         (checker-shift-black ne)
         (checker-shift-black nw)
         (move-type re-entry-type)
         (re-entry b1)
         (re-entry c1)
         (re-entry d1)
         (re-entry e1)
         (re-entry f1)
         (re-entry g1)
         (re-entry b2)
         (re-entry c2)
         (re-entry d2)
         (re-entry e2)
         (re-entry f2)
         (re-entry g2)
         (move-type re-entry-type2)
         (re-entry2 b1)
         (re-entry2 c1)
         (re-entry2 d1)
         (re-entry2 e1)
         (re-entry2 f1)
         (re-entry2 g1)
         (re-entry2 b2)
         (re-entry2 c2)
         (re-entry2 d2)
         (re-entry2 e2)
         (re-entry2 f2)
         (re-entry2 g2)
      )
   )

)

